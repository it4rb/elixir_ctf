<link phx-track-static rel="stylesheet" href={~p"/assets/app.css"} />
<.flash_group flash={@flash} />

<div class="px-4 py-10 sm:px-6 lg:px-8 xl:px-28 text-base leading-7 text-zinc-600">
  <div class="mt-4 space-y-4">
    <p class="text-[2rem] mt-4 font-semibold leading-10 tracking-tighter text-zinc-900">
      Elixir CTF Game
    </p>
    <p>
      This is an attempt to reimplement the famous
      <.link class="font-semibold leading-6 underline" navigate="https://microcorruption.com">
        Embedded Security CTF game
      </.link>
      in Elixir, using Phoenix and Liveview framework.
    </p>
    <p>
      The goal is pretty simple: there is an electronic lock that check the user input password then open the door if it's correct.<br />
      The lock is controlled by a microcontroller (MSP430) running some (potentially buggy) code.<br />
      A debugger is provided allowing you to view the assembly code, step through instructions, set breakpoints, view memory/register values...
    </p>
    <p>
      Your job is to understand the code, spot the bug if any, and come up with a well-crafted input to open the door.
    </p>
  </div>
  <div class="mt-8">
    <.link class="text-[1.7rem] font-bold underline" navigate={~p"/levels"}>
      Start playing
    </.link>
  </div>
  <div class="mt-8">
    <.link class="font-bold underline" navigate="https://github.com/it4rb/elixir_ctf">
      Github Repository
    </.link>
  </div>
  <div class="my-8 space-y-2">
    <img class="ml-8 mb-8 w-3/5 float-right" src="images/ctf.gif" />
    <p>
      The top-left panel lists assembly code, you can click a line to set/remove breakpoint.
    </p>
    <p>
      The bottom-left panel is ROM content. There might be different types of data here other than code.
    </p>
    <p>
      The top-right 3 panels shows register values, CPU status, and standard output.
    </p>
    <p>
      The bottom-right panel shows RAM content. You might want to pay attention to the SP register's value to know the location of current stack frame in RAM.
    </p>
    <p>
      And finally there are several control buttons:
    </p>
    <ul class="list-disc px-8">
      <li>Step: step through the instructions one by one</li>
      <li>
        Run: run continuously until the CPU is powered off or a breakpoint is hit or user input is requested
      </li>
      <li>Reset: back to the starting point</li>
      <li>Solve: solve the level on real lock</li>
    </ul>
  </div>
</div>
